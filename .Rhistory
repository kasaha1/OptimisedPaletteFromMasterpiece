shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyFiles")
I can think only of a conditional panel displaying some text if the folder wasn't selected. But I guess there should a better way to do this. Thank you!
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
ui <- fluidPage( # Application title
mainPanel(
shinyDirButton("dir", "Input directory", "Upload"),
verbatimTextOutput("dir", placeholder = TRUE)
))
server <- function(input, output) {
shinyDirChoose(
input,
'dir',
roots = c(home = '~'),
filetypes = c('', 'txt', 'bigWig', "tsv", "csv", "bw")
)
dir <- reactive(input$dir)
output$dir <- renderText({
parseDirPath(c(home = '~'), dir())
})
## change smth here... if output$dir is null, display getwd() but it doesn't work
observeEvent(ignoreNULL = TRUE,
eventExpr = {
input$dir
},
handlerExpr = {
home <- normalizePath("~")
datapath <<-
file.path(home, paste(unlist(dir()$path[-1]), collapse = .Platform$file.sep))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/png', 'image/jpeg'))
)
),
mainPanel(
div(id = "image-container", style = "display:flexbox")
)
)
)
server <- function(input, output) {
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
b64 <- base64enc::dataURI(file = inFile$datapath, mime = "image/png")
insertUI(
selector = "#image-container",
where = "afterBegin",
ui = img(src = b64, width = 250, height = 250)
)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/png', 'image/jpeg'))
)
),
mainPanel(
div(id = "image-container", style = "display:flexbox")
)
)
)
server <- function(input, output) {
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
b64 <- base64enc::dataURI(file = inFile$datapath, mime = "image/png")
cat(inFile$datapath)
insertUI(
selector = "#image-container",
where = "afterBegin",
ui = img(src = b64, width = 250, height = 250)
)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/jpeg'))
)
),
mainPanel(
div(id = "image-container", style = "display:flexbox")
)
)
)
server <- function(input, output) {
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
b64 <- base64enc::dataURI(file = inFile$datapath, mime = "image/png")
cat(inFile$datapath)
insertUI(
selector = "#image-container",
where = "afterBegin",
ui = img(src = b64, width = 250, height = 250)
)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#-----Input number of color---------
numOfcolor <- 32
# download.file("https://andreacirilloac.github.io/dataviz/images/sacra_famiglia_canigiani.jpg", "image.jpg")
painting     <- readJPEG("D:/GoogleDrive_KR/A_Task/종양외과학회_연수강좌_강의/masterP")
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("ggplot2", "dplyr", "readr", "data.table","jpeg","scales","paletter")
kasa.instPak (packages)
# download.file("https://andreacirilloac.github.io/dataviz/images/sacra_famiglia_canigiani.jpg", "image.jpg")
painting     <- readJPEG("D:/GoogleDrive_KR/A_Task/종양외과학회_연수강좌_강의/masterP")
# download.file("https://andreacirilloac.github.io/dataviz/images/sacra_famiglia_canigiani.jpg", "image.jpg")
painting     <- readJPEG("D:/GoogleDrive_KR/A_Task/종양외과학회_연수강좌_강의/masterP/구스타프클림트_처녀.jpg")
#-----Input number of color---------
numOfcolor <- 32
# download.file("https://andreacirilloac.github.io/dataviz/images/sacra_famiglia_canigiani.jpg", "image.jpg")
painting     <- readJPEG("D:/GoogleDrive_KR/A_Task/종양외과학회_연수강좌_강의/masterP/구스타프클림트_처녀.jpg")
dimension    <- dim(painting)
painting_rgb <- data.frame(
x = rep(1:dimension[2], each = dimension[1]),
y = rep(dimension[1]:1, dimension[2]),
R = as.vector(painting[,,1]), #slicing our array into three
G = as.vector(painting[,,2]),
B = as.vector(painting[,,3])
)
k_means        <- kmeans(painting_rgb[,c("R","G","B")], centers = numOfcolor, iter.max = 30)
show_col(rgb(k_means$centers))
#-----Input number of color---------
numOfcolor <- 32
library(kasaBasicFunctions)
# install Kang's basic functions package from the git-hub
#------------- Packages ----
packages <- c("ggplot2", "dplyr", "readr", "data.table","jpeg","scales")
kasa.instPak (packages)
# download.file("https://andreacirilloac.github.io/dataviz/images/sacra_famiglia_canigiani.jpg", "image.jpg")
painting     <- readJPEG("D:/GoogleDrive_KR/A_Task/종양외과학회_연수강좌_강의/masterP/구스타프클림트_처녀.jpg")
dimension    <- dim(painting)
painting_rgb <- data.frame(
x = rep(1:dimension[2], each = dimension[1]),
y = rep(dimension[1]:1, dimension[2]),
R = as.vector(painting[,,1]), #slicing our array into three
G = as.vector(painting[,,2]),
B = as.vector(painting[,,3])
)
k_means        <- kmeans(painting_rgb[,c("R","G","B")], centers = numOfcolor, iter.max = 30)
show_col(rgb(k_means$centers))
rgb(k_means$centers)
rgb(k_means$centers)
shiny::runApp()
runApp()
runApp()
runApp()
library(shinycssloaders)
runApp()
runApp()
runApp()
runApp()
